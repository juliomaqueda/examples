<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
    http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd">

	<!-- 
		<context:component-scan base-package="com.websystique.springmvc" /> tells spring to search project classpath
		for all classes under the package specified with base-package [com.websystique.springmvc], and look at
		each class to see if it is annotated with specific Spring annotations [@Controller, @Service, @Repository,
		@Component, etc..] and if it does then Spring will register the class with the bean factory as if you had
		typed in the xml configuration files.
	-->
	<context:component-scan base-package="examples.springmvc" />

	<!-- 
		<mvc:annotation-driven /> says that we can define spring beans dependencies without actually having to
		specify a bunch of beans in xml or implement an interface or extend a base class or anything. For example,
		just by annotating a class with @Controller (as we did above) , spring will know that the specified class
		contains methods that will handle HTTP requests, no need to define that as a bean in xml.
	-->
	<mvc:annotation-driven />

	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix">
			<value>/WEB-INF/views/</value>
		</property>
		<property name="suffix">
			<value>.jsp</value>
		</property>
	</bean>
</beans>